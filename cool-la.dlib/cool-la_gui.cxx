// generated by Fast Light User Interface Designer (fluid) version 1.0304

#include "cool-la_gui.h"

Fl_Value_Slider *HRot=(Fl_Value_Slider *)0;

static void cb_HRot(Fl_Value_Slider*, void*) {
  CoolBox->SetHRot(HRot->value());
}

Fl_Value_Slider *VRot=(Fl_Value_Slider *)0;

static void cb_VRot(Fl_Value_Slider*, void*) {
  CoolBox->SetVRot(VRot->value());
}

Fl_Value_Slider *ZRot=(Fl_Value_Slider *)0;

static void cb_ZRot(Fl_Value_Slider*, void*) {
  CoolBox->SetZRot(ZRot->value());
}

Fl_Value_Slider *Dots=(Fl_Value_Slider *)0;

static void cb_Dots(Fl_Value_Slider*, void*) {
  CoolBox->SetDots(Dots->value());
}

Cool *CoolBox=(Cool *)0;

static void cb_CoolBox(Cool* o, void*) {
  HRot->value(
  HRot->clamp(o->GetHRot())  );
VRot->value(
  VRot->clamp(o->GetVRot())  );
ZRot->value(
  ZRot->clamp(o->GetZRot())  );
}

Fl_Double_Window* make_window() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(570, 550);
    w = o; if (w) {/* empty */}
    { HRot = new Fl_Value_Slider(60, 500, 455, 35);
      HRot->tooltip("Horizontal Rotation");
      HRot->type(1);
      HRot->maximum(360);
      HRot->callback((Fl_Callback*)cb_HRot);
    } // Fl_Value_Slider* HRot
    { VRot = new Fl_Value_Slider(520, 60, 35, 430);
      VRot->tooltip("Vertical Rotation");
      VRot->maximum(360);
      VRot->callback((Fl_Callback*)cb_VRot);
    } // Fl_Value_Slider* VRot
    { ZRot = new Fl_Value_Slider(60, 15, 455, 35);
      ZRot->type(1);
      ZRot->maximum(360);
      ZRot->callback((Fl_Callback*)cb_ZRot);
    } // Fl_Value_Slider* ZRot
    { Dots = new Fl_Value_Slider(20, 60, 35, 430);
      Dots->tooltip("Number of sphere dots");
      Dots->maximum(2000);
      Dots->step(1);
      Dots->value(100);
      Dots->callback((Fl_Callback*)cb_Dots);
    } // Fl_Value_Slider* Dots
    { CoolBox = new Cool(60, 60, 455, 435);
      CoolBox->box(FL_DOWN_BOX);
      CoolBox->color(FL_FOREGROUND_COLOR);
      CoolBox->selection_color(FL_BACKGROUND_COLOR);
      CoolBox->labeltype(FL_NO_LABEL);
      CoolBox->labelfont(0);
      CoolBox->labelsize(14);
      CoolBox->labelcolor(FL_FOREGROUND_COLOR);
      CoolBox->callback((Fl_Callback*)cb_CoolBox);
      CoolBox->align(Fl_Align(FL_ALIGN_CLIP));
      CoolBox->when(FL_WHEN_CHANGED);
    } // Cool* CoolBox
    o->end();
  } // Fl_Double_Window* o
  return w;
}

int main(int argc, char **argv) {
  make_window()->show();
  		
  	return Fl::run();
  return Fl::run();
}
